import os
import time
import pandas as pd
import numpy as np

from rdkit import Chem
from Bio.PDB import *
from tqdm import tqdm

import DataBase.connection_postgresql as pgDB

gPATH = 'D:/Data/PDBbind/raw_data/PDBbind_v2020/'
rPATH = 'D:/Data/PDBbind/raw_data/PDBbind_v2020_refined/'
cPATH = 'D:/Data/PDBbind/raw_data/CASF-2016/coreset/'

'''
<postgresql available table>
-- CREATE TABLE pdbbind.available (
-- 	id integer generated by default as identity,
-- 	pdb_code char(4) REFERENCES pdbbind.binding (pdb_code) ON delete restrict NOT NULL,
-- 	available boolean NOT NULL,
-- 	inavailability_type character varying
-- )
'''

def extract_list(db:pgDB):
    query = 'SELECT pdb_code, subset FROM pdbbind.binding;'
    return db.run_query(query)


def _no_Folder(org_data_list:pd.DataFrame):
    result = []

    with tqdm(total=len(org_data_list)) as pbar:
        pbar.set_description('Check folder ')
        for i, row in org_data_list.iterrows():
            pbar.update(1)
            path_tmp = f"{row['path']}{row['pdb_code']}/"
            result.append(not os.path.isdir(path_tmp))

    return result


def _no_lig_file(org_data_list:pd.DataFrame):
    result_sdf = []
    result_mol2 = []

    with tqdm(total=len(org_data_list)) as pbar:
        pbar.set_description('Check ligand file ')
        for i, row in org_data_list.iterrows():
            pbar.update(1)
            id = row['pdb_code']
            path_tmp = f"{row['path']}{id}/"
            if not os.path.isdir(path_tmp):
                result_sdf.append(True)
                result_mol2.append(True)
            else:
                f_list = os.listdir(path_tmp)
                result_sdf.append(not f'{id}_ligand.sdf' in f_list)
                result_mol2.append(not f'{id}_ligand.mol2' in f_list)

    return result_sdf, result_mol2


def _no_ptn_file(org_data_list:pd.DataFrame):
    result_protein = []
    result_pocket = []

    with tqdm(total=len(org_data_list)) as pbar:
        pbar.set_description('Check protein file ')
        for i, row in org_data_list.iterrows():
            pbar.update(1)
            id = row['pdb_code']
            path_tmp = f"{row['path']}{id}/"
            if not os.path.isdir(path_tmp):
                result_protein.append(True)
                result_pocket.append(True)
            else:
                f_list = os.listdir(path_tmp)
                result_protein.append(not f'{id}_protein.pdb' in f_list)
                result_pocket.append(not f'{id}_pocket.pdb' in f_list)

    return result_protein, result_pocket


def _empty_lig(org_data_list:pd.DataFrame):
    result_sdf = []
    result_mol2 = []

    with tqdm(total=len(org_data_list)) as pbar:
        pbar.set_description('Check ligand file contents ')
        for i, row in org_data_list.iterrows():
            pbar.update(1)
            id = row['pdb_code']
            path_sdf = f"{row['path']}{id}/{id}_ligand.sdf"
            path_mol2 = f"{row['path']}{id}/{id}_ligand.mol2"

            if not os.path.isfile(path_sdf):
                result_sdf.append(True)
            else:
                if Chem.SDMolSupplier(path_sdf)[0]:
                    result_sdf.append(False)
                else:
                    result_sdf.append(True)

            if not os.path.isfile(path_mol2):
                result_mol2.append(True)
            else:
                if Chem.MolFromMol2File(path_mol2):
                    result_mol2.append(False)
                else:
                    result_mol2.append(True)

    return result_sdf, result_mol2


def _empty_ptn(org_data_list:pd.DataFrame):
    result_protein = []
    result_pocket = []

    with tqdm(total=len(org_data_list)) as pbar:
        pbar.set_description('Check protein file contents ')
        for i, row in org_data_list.iterrows():
            pbar.update(1)
            id = row['pdb_code']
            path_protein = f"{row['path']}{id}/{id}_protein.pdb"
            path_pocket = f"{row['path']}{id}/{id}_pocket.pdb"

            if not os.path.isfile(path_protein):
                result_protein.append(True)
            else:
                if Chem.MolFromPDBFile(path_protein):
                    result_protein.append(False)
                else:
                    result_protein.append(True)

            if not os.path.isfile(path_pocket):
                result_pocket.append(True)
            else:
                if Chem.MolFromPDBFile(path_pocket):
                    result_pocket.append(False)
                else:
                    result_pocket.append(True)

    return result_protein, result_pocket


def filtering(src:pd.DataFrame):
    # filtering
    filtered_data = pd.DataFrame()
    filtered_data['pdb_code'] = src['pdb_code']
    filtered_data['no_folder'] = _no_Folder(src)
    filtered_data['no_ptn_file'], filtered_data['no_pck_file'] = _no_ptn_file(src)
    filtered_data['no_lig_file_sdf'], filtered_data['no_lig_file_mol2'] = _no_lig_file(src)
    filtered_data['empty_ptn_file'], filtered_data['empty_pck_file'] = _empty_ptn(src)
    filtered_data['empty_lig_file_sdf'], filtered_data['empty_lig_file_mol2'] = _empty_lig(src)

    filtered_data['available'] = True

    filtered_data.loc[filtered_data['no_folder'] == True, 'available'] = False
    filtered_data.loc[filtered_data['no_ptn_file'] == True, 'available'] = False

    # true는 fillna 사용
    filtered_data.loc[(filtered_data['no_lig_file_sdf'] == True) &
                      (filtered_data['no_lig_file_mol2'] == True), 'available'] = False
    filtered_data.loc[(filtered_data['empty_lig_file_sdf'] == True) &
                      (filtered_data['empty_lig_file_mol2'] == True), 'available'] = False
    filtered_data.loc[(filtered_data['empty_pck_file'] == True) &
                      (filtered_data['empty_pck_file'] == True), 'available'] = False
    filtered_data.to_csv(f"./Report/check_inavailability_{time.strftime('%Y-%m-%d', time.localtime(time.time()))}.csv")

    return filtered_data


if __name__ == '__main__':
    db = pgDB.CRUD()
    extracted_list = extract_list(db)
    org_data = pd.DataFrame()

    org_data['pdb_code'] = [x[0] for i, x in enumerate(extracted_list)]
    org_data['subset'] = [x[1] for i, x in enumerate(extracted_list)]

    path_list = []
    for i, type in enumerate(org_data['subset']):
        if type == 'general':
            path_list.append(gPATH)
        elif type == 'refined':
            path_list.append(rPATH)
        elif type == 'coreset':
            path_list.append(cPATH)

    org_data['path'] = path_list

    # loop
    unit = 200
    loop = int(len(org_data) / unit) + 1

    for i in range(loop):
        i_start = i * unit
        i_end = i_start + unit

        if i_end > len(org_data): i_end = -1

        org_data_subset = org_data[i_start:i_end]
        filtered_data = filtering(org_data_subset)

        filtered_data2db = pd.DataFrame(filtered_data[['pdb_code', 'available']], columns=['pdb_code', 'available'])
        filtered_data2db['inavailability_type'] = None

        idx_invailability = filtered_data2db[filtered_data2db['available'] == False].index

        for _, idx in enumerate(idx_invailability):
            row_val = filtered_data.loc[idx]
            inav_type = row_val.index[row_val == False].tolist()

            if 'available' in inav_type:
                inav_type.remove('available')
            filtered_data2db.loc[idx, 'inavailability_type'] = ', '.join(inav_type)  # np.array(inav_type).reshape(-1, 1)

        del filtered_data

        query_values = []
        for idx, row in filtered_data2db.iterrows():
            query = f"('{row['pdb_code']}', '{row['available']}', " \
                    f"'{row['inavailability_type']}')"
            query_values.append(query)
        query_values = ', '.join(query_values)

        db.insertDB(schema='pdbbind', table='available', column=', '.join(filtered_data2db), data=query_values, multiple=True)
        db.commit()

